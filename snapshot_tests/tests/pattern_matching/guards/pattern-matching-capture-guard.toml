script = """
2 is
    1
        "no"
    other if other >= 2
        "value captured is {other}"
"""

[output]
result = "value captured is 2"
type = "string"

[output.compiler]
bytecode = "[32, 4, 109, 97, 105, 110, 25, 0, 0, 0, 2, 21, 0, 20, 0, 25, 0, 0, 0, 1, 17, 40, 0, 7, 26, 2, 110, 111, 38, 0, 45, 25, 0, 0, 0, 2, 21, 0, 20, 0, 25, 0, 0, 0, 2, 5, 19, 40, 0, 26, 26, 18, 118, 97, 108, 117, 101, 32, 99, 97, 112, 116, 117, 114, 101, 100, 32, 105, 115, 32, 20, 0, 14, 26, 0, 14, 34]"
bytecode_length = 77
disassembled = """

0 \t=== function chunk: main ===
6 \tpush_integer (value: 2)
11 \tset_value (index: 0)
13 \tget_value (index: 0)
15 \tpush_integer (value: 1)
20 \teq
21 \tjump if false (offset: 7, to byte 31)
24 \tpush_string (value: 'no')
28 \tjump (offset: 45, to byte 76)
31 \tpush_integer (value: 2)
36 \tset_value (index: 0)
38 \tget_value (index: 0)
40 \tpush_integer (value: 2)
45 \tint_lt
46 \tnot
47 \tjump if false (offset: 26, to byte 76)
50 \tpush_string (value: 'value captured is ')
70 \tget_value (index: 0)
72 \tstr_concat
73 \tpush_string (value: '')
75 \tstr_concat
76 \tret
"""

[output.vm]
instructions_executed = 20
jumps_performed = 1
